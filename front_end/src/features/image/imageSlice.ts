import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import {
  deleteImageAsync,
  uploadImageAsync,
} from "../../services/image.service";

export interface ImageState {
  data: any;
}

const initialState: ImageState = {
  data: {},
};

export const imageSlice = createSlice({
  name: "image",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(uploadImageAsync.fulfilled, (state, action) => {
        return action.payload;
      })
      .addCase(uploadImageAsync.rejected, (state) => {})
      .addCase(deleteImageAsync.fulfilled, (state, action) => {
        return action.payload;
      })
      .addCase(deleteImageAsync.rejected, (state) => {});
  },
});

export default imageSlice.reducer;
