import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { getCategoriesAsync } from "../../services/category.service";


export interface ICategory {
  id: number,
  name: string,
  image: string,
  created_at: Date,
}

export interface CategoryState {
  loading: boolean;
  categories : Array<ICategory> | []
}

const initialState: CategoryState = {
  loading: false,
  categories: []
};

export const categorySlice = createSlice({
  name: "category",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCategoriesAsync.fulfilled, (state, action) => {
        state.categories = action.payload.data.categories 
      })
      .addCase(getCategoriesAsync.pending, (state, action) => {});
  },
});

export const selectCategory = (state: RootState) => state.category;

export default categorySlice.reducer;
