import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import {
  deleteImageAsync,
  uploadImageAsync,
} from "../../services/image.service";
import { findRoomByIdAsync } from "../../services/room.service";
import { log } from "console";

export interface RoomState {
  room: any;
  loading: boolean;
  step: number;
}

const initialState: RoomState = {
  room: {},
  loading: false,
  step: 1,
};

export const roomSlice = createSlice({
  name: "room",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStep: (state, action: PayloadAction<any>) => {
      state.step = action.payload;
    },
    setRoom: (state, action: PayloadAction<any>) => {
      console.log(action.payload);
      
      state.room = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(findRoomByIdAsync.fulfilled, (state, action) => {
      state.room = action.payload?.data.home;
    });
  },
});

export const { setStep, setRoom } = roomSlice.actions;

export const selectRoom = (state: RootState) => state.room;

export default roomSlice.reducer;
