import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import {
  deleteImageAsync,
  uploadImageAsync,
} from "../../services/image.service";

export interface RoomState {
  data: any;
  loading: boolean;
  step: number;
}

const initialState: RoomState = {
  data: {},
  loading: false,
  step: 1
};

export const roomSlice = createSlice({
  name: "room",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStep : (state, action: PayloadAction<any>) => {
        state.step = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(uploadImageAsync.fulfilled, (state, action) => {
          state.loading = false;
      })
      .addCase(uploadImageAsync.pending, (state, action) => {
        state.loading = true;
      })
      .addCase(uploadImageAsync.rejected, (state) => {})
      .addCase(deleteImageAsync.fulfilled, (state, action) => {
      })
      .addCase(deleteImageAsync.rejected, (state) => {});
  },
});

export const { setStep } = roomSlice.actions;

export const selectRoom= (state: RootState) => state.room;

export default roomSlice.reducer;