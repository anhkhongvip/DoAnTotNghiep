import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import {
  getAccountAsync,
  updateAccountAsync,
} from "../../services/account.service";

export interface AccountState {
  account?: any;
  loading: boolean;
}

const initialState: AccountState = {
  account: null,
  loading: false,
};

export const accountSlice = createSlice({
  name: "account",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    removeAccount: (state) => {
      state.account = null;
    },
    setAccount: (state, action: PayloadAction<any>) => {
      state.account = {...action.payload};
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAccountAsync.fulfilled, (state, action) => {
        const { account } = action.payload?.data;
        state.account = account;
      })
      .addCase(getAccountAsync.rejected, (state) => {})
      .addCase(updateAccountAsync.fulfilled, (state, action) => {
        state.loading = false;
      })
      .addCase(updateAccountAsync.pending, (state, action) => {
        state.loading = true;
      });
  },
});

export const { removeAccount, setAccount } = accountSlice.actions;

export const selectAccount = (state: RootState) => state.account;

export default accountSlice.reducer;
